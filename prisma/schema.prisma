generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String    @unique
    emailVerified DateTime?
    type          String    @default("user")
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    Comment       Comment[]
    Reserve       Reserve[]
}

model VerificationToken {
    identifier String   @id @map("_id")
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id    String  @id @default(cuid()) @map("_id")
    slug  String  @unique
    title String
    img   String?
    Posts Post[]
}

model Post {
    id        String    @id @default(cuid()) @map("_id")
    createdAt DateTime  @default(now())
    slug      String    @unique
    title     String
    desc      String
    img       String?
    views     Int       @default(0)
    catSlug   String
    cat       Category  @relation(fields: [catSlug], references: [slug])
    userEmail String
    user      User      @relation(fields: [userEmail], references: [email])
    comments  Comment[]
    public    Boolean   @default(false)
}

model Comment {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    desc      String
    userEmail String
    user      User     @relation(fields: [userEmail], references: [email])
    postSlug  String
    post      Post     @relation(fields: [postSlug], references: [slug])
}

model Room {
    id        String     @id @default(cuid()) @map("_id")
    desc      String?
    type      String
    img       String?
    TypeRoom  TypeRoom   @relation(fields: [type], references: [title])
    price     Int
    PriceRoom PriceRoom? @relation(fields: [price], references: [priceRoom])

    Reserve   Reserve? @relation(fields: [reserveId], references: [id])
    reserveId String?
}

model TypeRoom {
    id    String @id @default(cuid()) @map("_id")
    title String @unique
    Rooms Room[]
}

model PriceRoom {
    id        String @id @default(cuid()) @map("_id")
    priceRoom Int    @unique
    Rooms     Room[]
}

model Reserve {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    day       String
    time      String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    Room      Room[]
}
